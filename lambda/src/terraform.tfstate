{
  "version": 4,
  "terraform_version": "1.1.3",
  "serial": 50,
  "lineage": "c5ba47ec-49a6-4c9b-3e5f-59ca7673404c",
  "outputs": {
    "function_name": {
      "value": "RoatateAccessKey",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "archive_file",
      "name": "lambda_zip_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/archive\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "excludes": null,
            "id": "2886b98a905bf3367fa6166a71c472eaa5a21c90",
            "output_base64sha256": "q6SIppdX2lg0T9AtmPE4GwLA3H+Kgf8ti737XezOrYw=",
            "output_file_mode": null,
            "output_md5": "6892c2b142ef71d71e562d6a40fb4829",
            "output_path": "./lambda_function.zip",
            "output_sha": "2886b98a905bf3367fa6166a71c472eaa5a21c90",
            "output_size": 3513,
            "source": [
              {
                "content": "import boto3\nfrom datetime import datetime\nimport dateutil.tz\nimport json\nimport ast\nimport sys\nimport re\nimport logging\nimport os\n\n# Setting logger configuration\nlogger = logging.getLogger('')\nlogger.setLevel(logging.INFO)\n\n# Regex\nVALID_EMAIL_REGEX = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n\n# Variables\nBUILD_VERSION = '2.0.0'\nAWS_REGION = 'us-east-1'\nSERVICE_ACCOUNT_NAME = ''  # WIP - To add username to skip invalidation process\n# WIP - To add email address to end final report (weekly)\nEMAIL_TO_ADMIN = os.environ['EMAIL_TO_ADMIN']\n# WIP - To add email address used by ses to send alerts to users about keys\nEMAIL_FROM = os.environ['EMAIL_FROM']\nEMAIL_SEND_COMPLETION_REPORT = ast.literal_eval('False')\n# WIP - To add group name to ignore users belonging to this group for\n# disabling keys\nGROUP_LIST = ''\n\n# Length of mask over the IAM Access Key\nMASK_ACCESS_KEY_LENGTH = ast.literal_eval('16')\n\nKEY_YOUNG_MESSAGE = 'key is still young'\n\n# First email warning\nFIRST_WARNING_NUM_DAYS = 75\n\n# Email SPAMMER PER HOUR\nKEY_AGE_SPAMMER_IN_DAYS = 89\n\n# Max AGE days of key after which it is considered to be DISABLED\nKEY_MAX_AGE_IN_DAYS = 90\nKEY_DISABLED_MESSAGE = 'key is now Disabled! Changing key to INACTIVE state'\n\n# Max AGE days of key after which it is considered EXPIRED\nKEY_EXPIRE_AGE_IN_DAYS = 100\nKEY_EXPIRED_MESSAGE = 'key Expiration is overdue, key will be deleted now!'\n\n\n# Character length of an IAM Access Key\nACCESS_KEY_LENGTH = 20\nKEY_STATE_ACTIVE = \"Active\"\nKEY_STATE_INACTIVE = \"Inactive\"\n\n\n# check to see if the MASK_ACCESS_KEY_LENGTH has been misconfigured\nif MASK_ACCESS_KEY_LENGTH \u003e ACCESS_KEY_LENGTH:\n    MASK_ACCESS_KEY_LENGTH = 16\n\n\ndef create_warning(days_left) -\u003e str:\n    return f'key is due to be disable in {90-int(days_left)} days'\n\n\ndef validate_email(email_address) -\u003e bool:\n    # pass the regular expression\n    # and the string into the fullmatch() method\n    if re.fullmatch(VALID_EMAIL_REGEX, email_address):\n        return True\n\n    else:\n        return False\n\n\ndef tzutc():\n    return dateutil.tz.tzutc()\n\n\ndef key_age(key_created_date) -\u003e int:\n    tz_info = key_created_date.tzinfo\n    age = datetime.now(tz_info) - key_created_date\n    # logger.info(f'Key Age: {age}')\n    key_age_str = str(age)\n    if 'days' not in key_age_str:\n        return 0\n    days = int(key_age_str.split(',')[0].split(' ')[0])\n    return days\n\n\ndef send_notification_email(username, age, access_key_id, key_state) -\u003e None:\n    pass\n    # client = boto3.client('ses', region_name=AWS_REGION)\n    # data = f\"The Access Key {access_key_id} belonging to User {username} is being alerted as it is {age} days old and {key_state}\\n\"\n    # confluence_uri = \"https://cloudhealthtech.atlassian.net/l/c/fmVzKSSV\"\n    # if validate_email(username):\n    #     response = client.send_email(\n    #         Source=EMAIL_FROM,\n    #         Destination={\n    #             'ToAddresses': [username]\n    #         },\n    #         Message={\n    #             'Subject': {\n    #                 'Data': f'Access key {access_key_id} is {age} days old.'\n    #             },\n    #             'Body': {\n    #                 'Html': {\n    #                     'Data': f\"\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003cbody\u003e\u003cp\u003e{data}\u003cbr\u003e\u003cbr\u003eReference Link -\u003cbr\u003e{confluence_uri}\u003c/p\u003e\u003c/body\u003e\u003c/html\u003e\"\n    #                 }\n    #             }\n    #         })\n    #     logger.info(\n    #         f\"send_notification_email response for {username}: {json.dumps(response, indent=4, default=str)}\")\n    #     return f\"Email Sent! to {username}\"\n    # logger.info(f\"Can't send email : {username} is a invalid email\")\n\n\ndef send_completion_email(email_to, deactivated_report) -\u003e None:\n    pass\n    # client = boto3.client('ses', region_name=AWS_REGION)\n    # response = client.send_email(\n    #     Source=EMAIL_FROM,\n    #     Destination={\n    #         'ToAddresses': [email_to]\n    #     },\n    #     Message={\n    #         'Subject': {\n    #             'Data': 'AWS IAM Access Key Rotation - Lambda Function'\n    #         },\n    #         'Body': {\n    #             'Html': {\n    #                 'Data': f\"\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eSECURITY IAM CREDENTIAL REPORT\u003ch1\u003e\u003ch2\u003eAWS IAM Access Key Rotation Lambda Function Deactivation\u003cbr\u003e\u003c/h2\u003eReport:\\n\\n\\n{deactivated_report}\u003c/body\u003e\u003c/html\u003e\"\n    #             }\n    #         }\n    #     })\n    # logger.info(\n    #     f\"send_completion_email response: {json.dumps(response, indent=4, default=str)}\")\n\n\ndef mask_access_key(access_key) -\u003e str:\n    return access_key[-(ACCESS_KEY_LENGTH - MASK_ACCESS_KEY_LENGTH):].rjust(len(access_key), \"*\")\n\n\ndef create_email_report(report_data) -\u003e str:\n    report_date_line = f\"\u003ctr\u003e\u003cth\u003eREPORTDATE\u003c/th\u003e\u003ctd colspan='2'\u003e{report_data['reportdate']}\u003c/td\u003e\u003c/tr\u003e\\n\"\n    report = f\"\u003ctr\u003e\u003cth colspan='3'\u003eUSERS\u003c/th\u003e\u003c/tr\u003e\\n\"\n    for usr in report_data[\"users\"]:\n        for key in usr[\"keys\"]:\n            report += f\"\u003ctr\u003e\u003cth rowspan='5'\u003eUSERNAME = {usr['username']}\u003c/th\u003e\u003c/tr\u003e\\n\"\n            for data in key:\n                report += f\"\u003ctr\u003e\u003cth\u003e{data.upper()}\u003c/th\u003e\u003ctd\u003e{key[data]}\u003c/td\u003e\u003c/tr\u003e\\n\"\n    return f\"\u003ctable border=1 style='width:100%'\u003e{report_date_line}{report}\u003c/table\u003e\"\n\n\ndef lambda_handler(event, lambda_context):\n    logger.info(f\"Event: {event}\")\n    logger.info(f'RotateAccessKey ({BUILD_VERSION}): starting...')\n\n    # Connect to AWS APIs\n    client = boto3.client('iam')\n    users = {}\n\n    paginator = client.get_paginator(\"list_users\")\n    response_iterator = paginator.paginate()\n    data = {}\n    for response in response_iterator:\n        data.update(response)\n    # logger.info(json.dumps(data, indent=4, default=str))\n    userindex = 0\n\n    for user in data['Users']:\n        userid = user['UserId']\n        username = user['UserName']\n        users[userid] = username\n\n    # logger.info(json.dumps(users, indent=4, default=str))\n\n    users_report1 = []\n    users_report2 = []\n\n    logger.info(\n        f\"Test if the user belongs to the exclusion group: {GROUP_LIST}\")\n    for user in users:\n        userindex += 1\n        user_keys = []\n        username = users[user]\n        # logger.info(f'\\nuserindex: {userindex} \\nuser: {user} \\nusername: {username}')\n\n        # Test if a user belongs to a specific list of groups. If they do,\n        # don't invalidate the access key\n        user_groups = client.list_groups_for_user(UserName=username)\n        skip = False\n        for groupName in user_groups['Groups']:\n            if groupName['GroupName'] == GROUP_LIST:\n                logger.warning(\n                    f'Detected that {username} belongs to: {GROUP_LIST} \\nuserindex: {userindex} \\nuser: {user} \\nusername: {username}')\n                skip = True\n                continue\n\n        if skip:\n            logger.warning(\"Don't invalidate Access Key\")\n            continue\n\n        # check to see if the current user is a special service account\n        if username == SERVICE_ACCOUNT_NAME:\n            logger.warning(\n                f'Detected special service account {username}, skipping account...')\n            continue\n\n        access_keys = client.list_access_keys(UserName=username)[\n            'AccessKeyMetadata']\n        for access_key in access_keys:\n            access_key_id = access_key['AccessKeyId']\n            masked_access_key_id = mask_access_key(access_key_id)\n            existing_key_status = access_key['Status']\n            key_created_date = access_key['CreateDate']\n            age = key_age(key_created_date)\n            logger.info(\n                f'\\nuserindex: {userindex} \\nuser: {user} \\nusername: {username} \\nAccessKeyId: {masked_access_key_id} \\nExistingKeyStatus: {existing_key_status} \\nkey_created_date: {key_created_date} \\nAge: {age}')\n            # we only need to examine the currently Active and about to expire\n            # keys\n            if existing_key_status == \"Inactive\" and age \u003c KEY_EXPIRE_AGE_IN_DAYS:\n                key_state = 'key is already in an INACTIVE state'\n                key_info = {\n                    'accesskeyid': masked_access_key_id,\n                    'age': age,\n                    'state': key_state,\n                    'changed': False}\n                user_keys.append(key_info)\n                continue\n\n            key_state = ''\n            key_state_changed = False\n            if age \u003c FIRST_WARNING_NUM_DAYS:\n                key_state = KEY_YOUNG_MESSAGE\n            elif age \u003e= FIRST_WARNING_NUM_DAYS and age \u003c KEY_AGE_SPAMMER_IN_DAYS:\n                key_state = create_warning(age)\n                if not event['check_for_outdated_keys']:\n                    send_notification_email(\n                        username, age, masked_access_key_id, key_state)\n            elif age == KEY_AGE_SPAMMER_IN_DAYS:\n                key_state = create_warning(age)\n                send_notification_email(\n                    username, age, masked_access_key_id, key_state)\n            elif age \u003e= KEY_MAX_AGE_IN_DAYS and age \u003c KEY_EXPIRE_AGE_IN_DAYS:\n                key_state = KEY_DISABLED_MESSAGE\n                if event['check_for_outdated_keys']:\n                    # client.update_access_key(\n                    #     UserName=username,\n                    #     AccessKeyId=access_key_id,\n                    #     Status=KEY_STATE_INACTIVE)\n                    send_notification_email(\n                        username, age, masked_access_key_id, key_state)\n                    key_state_changed = True\n                    continue\n                # client.update_access_key(\n                #     UserName=username,\n                #     AccessKeyId=access_key_id,\n                #     Status=KEY_STATE_INACTIVE)\n                send_notification_email(\n                    username, age, masked_access_key_id, key_state)\n                key_state_changed = True\n            elif age \u003e= KEY_EXPIRE_AGE_IN_DAYS:\n                key_state = KEY_EXPIRED_MESSAGE\n                # client.delete_access_key(UserName=username, AccessKeyId=access_key_id)\n                send_notification_email(\n                    username, age, masked_access_key_id, key_state)\n                key_state_changed = True\n            key_info = {\n                'accesskeyid': masked_access_key_id,\n                'age': age,\n                'state': key_state,\n                'changed': key_state_changed}\n            user_keys.append(key_info)\n        user_info_with_username = {\n            'userid': userindex,\n            'username': username,\n            'keys': user_keys}\n        user_info_without_username = {'userid': userindex, 'keys': user_keys}\n        users_report1.append(user_info_with_username)\n        users_report2.append(user_info_without_username)\n\n    if userindex == len(user) and event['check_for_outdated_keys']:\n        sys.exit()\n\n    if len(users_report1) \u003e 0 and len(users_report2) \u003e 0:\n        EMAIL_SEND_COMPLETION_REPORT = True\n        finished = str(datetime.now())\n        deactivated_report1 = {'reportdate': finished, 'users': users_report1}\n        logger.info(\n            f'\\n\\nDeactivated_Report1: {json.dumps(deactivated_report1, indent=4, default=str)}')\n\n    if EMAIL_SEND_COMPLETION_REPORT and not event['check_for_outdated_keys']:\n        deactivated_report2 = {'reportdate': finished, 'users': users_report1}\n\n        send_completion_email(EMAIL_TO_ADMIN,\n                              create_email_report(deactivated_report2))\n\n    logger.info(f'Completed ({BUILD_VERSION, finished})')\n    return deactivated_report1\n",
                "filename": "RotateAccessKey.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "844584796563",
            "arn": "arn:aws:sts::844584796563:assumed-role/ExternalAdminRole/osmanm@vmware.com",
            "id": "844584796563",
            "user_id": "AROAITCL63P5QI37PM7QK:osmanm@vmware.com"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "iam_rotation_lambda_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "409190546",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"IAMAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:UpdateAccessKey\",\n        \"iam:ListUsers\",\n        \"iam:ListGroupsForUser\",\n        \"iam:ListAccessKeys\",\n        \"iam:DeleteAccessKey\"\n      ],\n      \"Resource\": \"arn:aws:iam::844584796563:user/*\"\n    },\n    {\n      \"Sid\": \"sesaccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ses:SendEmail\",\n      \"Resource\": \"arn:aws:ses:us-east-1:844584796563:identity/*\"\n    },\n    {\n      \"Sid\": \"LambdaBasicExecution\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:PutLogEvents\",\n        \"logs:CreateLogStream\"\n      ],\n      \"Resource\": \"arn:aws:logs:us-east-1:844584796563:log-group:*\"\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "iam:DeleteAccessKey",
                  "iam:ListAccessKeys",
                  "iam:ListGroupsForUser",
                  "iam:ListUsers",
                  "iam:UpdateAccessKey"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:iam::844584796563:user/*"
                ],
                "sid": "IAMAccess"
              },
              {
                "actions": [
                  "ses:SendEmail"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:ses:us-east-1:844584796563:identity/*"
                ],
                "sid": "sesaccess"
              },
              {
                "actions": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:logs:us-east-1:844584796563:log-group:*"
                ],
                "sid": "LambdaBasicExecution"
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_region",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "US East (N. Virginia)",
            "endpoint": "ec2.us-east-1.amazonaws.com",
            "id": "us-east-1",
            "name": "us-east-1"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_event_rule",
      "name": "hourly_cron_job",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:events:us-east-1:844584796563:rule/hourly_access_key_rotation_lambda",
            "description": "Secops IAM Access Key Rotation Lambda per hour",
            "event_bus_name": "default",
            "event_pattern": null,
            "id": "hourly_access_key_rotation_lambda",
            "is_enabled": true,
            "name": "hourly_access_key_rotation_lambda",
            "name_prefix": "",
            "role_arn": "",
            "schedule_expression": "rate(60 minutes)",
            "tags": {},
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_event_rule",
      "name": "weekly_cron_job",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:events:us-east-1:844584796563:rule/weekly_access_key_rotation_lambda",
            "description": "Secops IAM Access Key Rotation Lambda per week",
            "event_bus_name": "default",
            "event_pattern": null,
            "id": "weekly_access_key_rotation_lambda",
            "is_enabled": true,
            "name": "weekly_access_key_rotation_lambda",
            "name_prefix": "",
            "role_arn": "",
            "schedule_expression": "cron(0 12 ? * MON *)",
            "tags": {},
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_event_target",
      "name": "hourly_cron_job_target",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:844584796563:function:RoatateAccessKey",
            "batch_target": [],
            "dead_letter_config": [],
            "ecs_target": [],
            "event_bus_name": "default",
            "http_target": [],
            "id": "hourly_access_key_rotation_lambda-terraform-20220120200443775900000002",
            "input": "",
            "input_path": "",
            "input_transformer": [
              {
                "input_paths": {},
                "input_template": "    {\"check_for_outdated_keys\":true}\n"
              }
            ],
            "kinesis_target": [],
            "redshift_target": [],
            "retry_policy": [],
            "role_arn": "",
            "rule": "hourly_access_key_rotation_lambda",
            "run_command_targets": [],
            "sqs_target": [],
            "target_id": "terraform-20220120200443775900000002"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_cloudwatch_event_rule.hourly_cron_job",
            "aws_iam_role.iam_for_lambda",
            "aws_lambda_function.iam_access_key_lambda",
            "data.archive_file.lambda_zip_file"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_event_target",
      "name": "weekly_cron_job_target",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:lambda:us-east-1:844584796563:function:RoatateAccessKey",
            "batch_target": [],
            "dead_letter_config": [],
            "ecs_target": [],
            "event_bus_name": "default",
            "http_target": [],
            "id": "weekly_access_key_rotation_lambda-terraform-20220120200443776000000003",
            "input": "",
            "input_path": "",
            "input_transformer": [
              {
                "input_paths": {},
                "input_template": "    {\"check_for_outdated_keys\":false}\n"
              }
            ],
            "kinesis_target": [],
            "redshift_target": [],
            "retry_policy": [],
            "role_arn": "",
            "rule": "weekly_access_key_rotation_lambda",
            "run_command_targets": [],
            "sqs_target": [],
            "target_id": "terraform-20220120200443776000000003"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.archive_file.lambda_zip_file",
            "aws_cloudwatch_event_rule.weekly_cron_job",
            "aws_iam_role.iam_for_lambda",
            "aws_lambda_function.iam_access_key_lambda"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "iam_access_key_lambda_log_group",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:844584796563:log-group:/aws/lambda/RoatateAccessKey",
            "id": "/aws/lambda/RoatateAccessKey",
            "kms_key_id": "",
            "name": "/aws/lambda/RoatateAccessKey",
            "name_prefix": null,
            "retention_in_days": 0,
            "tags": {},
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.iam_for_lambda",
            "aws_lambda_function.iam_access_key_lambda",
            "data.archive_file.lambda_zip_file"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "iam_for_lambda",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::844584796563:role/secops_iam_access_key_rotation_lambda",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2022-01-20T20:04:27Z",
            "description": "",
            "force_detach_policies": false,
            "id": "secops_iam_access_key_rotation_lambda",
            "inline_policy": [
              {
                "name": "terraform-20220120200428322300000001",
                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"IAMAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:UpdateAccessKey\",\n        \"iam:ListUsers\",\n        \"iam:ListGroupsForUser\",\n        \"iam:ListAccessKeys\",\n        \"iam:DeleteAccessKey\"\n      ],\n      \"Resource\": \"arn:aws:iam::844584796563:user/*\"\n    },\n    {\n      \"Sid\": \"sesaccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ses:SendEmail\",\n      \"Resource\": \"arn:aws:ses:us-east-1:844584796563:identity/*\"\n    },\n    {\n      \"Sid\": \"LambdaBasicExecution\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:PutLogEvents\",\n        \"logs:CreateLogStream\"\n      ],\n      \"Resource\": \"arn:aws:logs:us-east-1:844584796563:log-group:*\"\n    }\n  ]\n}"
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "secops_iam_access_key_rotation_lambda",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {},
            "unique_id": "AROA4JJJNIGJWKQ5CIL2G"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "lambda_exec_role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "secops_iam_access_key_rotation_lambda:terraform-20220120200428322300000001",
            "name": "terraform-20220120200428322300000001",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"IAMAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:UpdateAccessKey\",\n        \"iam:ListUsers\",\n        \"iam:ListGroupsForUser\",\n        \"iam:ListAccessKeys\",\n        \"iam:DeleteAccessKey\"\n      ],\n      \"Resource\": \"arn:aws:iam::844584796563:user/*\"\n    },\n    {\n      \"Sid\": \"sesaccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ses:SendEmail\",\n      \"Resource\": \"arn:aws:ses:us-east-1:844584796563:identity/*\"\n    },\n    {\n      \"Sid\": \"LambdaBasicExecution\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:PutLogEvents\",\n        \"logs:CreateLogStream\"\n      ],\n      \"Resource\": \"arn:aws:logs:us-east-1:844584796563:log-group:*\"\n    }\n  ]\n}",
            "role": "secops_iam_access_key_rotation_lambda"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.iam_for_lambda",
            "data.aws_caller_identity.current",
            "data.aws_iam_policy_document.iam_rotation_lambda_policy",
            "data.aws_region.current"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "iam_access_key_lambda",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architectures": [
              "x86_64"
            ],
            "arn": "arn:aws:lambda:us-east-1:844584796563:function:RoatateAccessKey",
            "code_signing_config_arn": "",
            "dead_letter_config": [],
            "description": "Iam Access Key Rotation Lambda",
            "environment": [
              {
                "variables": {
                  "EMAIL_FROM": "bar",
                  "EMAIL_TO_ADMIN": "ch-infosec@vmware.com"
                }
              }
            ],
            "file_system_config": [],
            "filename": "./lambda_function.zip",
            "function_name": "RoatateAccessKey",
            "handler": "RotateAccessKey.lambda_handler",
            "id": "RoatateAccessKey",
            "image_config": [],
            "image_uri": "",
            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:844584796563:function:RoatateAccessKey/invocations",
            "kms_key_arn": "",
            "last_modified": "2022-02-21T14:18:39.000+0000",
            "layers": [],
            "memory_size": 128,
            "package_type": "Zip",
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-east-1:844584796563:function:RoatateAccessKey:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::844584796563:role/secops_iam_access_key_rotation_lambda",
            "runtime": "python3.9",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "signing_job_arn": "",
            "signing_profile_version_arn": "",
            "source_code_hash": "q6SIppdX2lg0T9AtmPE4GwLA3H+Kgf8ti737XezOrYw=",
            "source_code_size": 3513,
            "tags": {},
            "tags_all": {},
            "timeout": 900,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_iam_role.iam_for_lambda",
            "data.archive_file.lambda_zip_file"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "allow_cloudwatch_to_call_lambda_hourly",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "RoatateAccessKey",
            "id": "AllowExecutionFromCloudWatch",
            "principal": "events.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:events:us-east-1:844584796563:rule/hourly_access_key_rotation_lambda",
            "statement_id": "AllowExecutionFromCloudWatch",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_event_rule.hourly_cron_job",
            "aws_iam_role.iam_for_lambda",
            "aws_lambda_function.iam_access_key_lambda",
            "data.archive_file.lambda_zip_file"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lambda_permission",
      "name": "allow_cloudwatch_to_call_lambda_weekly",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "action": "lambda:InvokeFunction",
            "event_source_token": null,
            "function_name": "RoatateAccessKey",
            "id": "AllowExecutionFromCloudWatch1",
            "principal": "events.amazonaws.com",
            "qualifier": "",
            "source_account": null,
            "source_arn": "arn:aws:events:us-east-1:844584796563:rule/weekly_access_key_rotation_lambda",
            "statement_id": "AllowExecutionFromCloudWatch1",
            "statement_id_prefix": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudwatch_event_rule.weekly_cron_job",
            "aws_iam_role.iam_for_lambda",
            "aws_lambda_function.iam_access_key_lambda",
            "data.archive_file.lambda_zip_file"
          ]
        }
      ]
    }
  ]
}
